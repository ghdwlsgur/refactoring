순서 (phase-a ~ phase-s) => (separate-a ~ separate-g)

함수 추출하기, 변수 인라인하기, 함수 옮기기, 조건부 로직을 다형성으로 바꾸기를 비롯한 다양한 리팩터링 기법을 사용했다.

이번 리팩토링은 크게 세 단계로 진행됐다.

먼저 원본 함수를 중첩 함수 여러 개로 나누고 단계 쪼개기를 적용해서 계산 코드와 출력 코드를 분리했다.
마지막으로 계산 로직을 다형성으로 표현했다. 
각 단계에서 코드 구조를 보강했고 그럴 때마다 코드가 수행하는 일이 더욱 분명하게 드러난다.

리팩터링은 대부분 코드가 하는 일을 파악하는 데서 시작한다. 그래서 코드를 읽고, 개선점을 찾고,
리팩터링 작업을 통해 개선점을 코드에 반영하는 식으로 진행한다. 그 결과 코드가 명확해지고 이해하기 
더 쉬워진다. 그러면 또 다른 개선점이 떠오르며 선순환이 형성된다.

좋은 코드를 가늠하는 확실한 방법은 '얼마나 수정하기 쉬운가'이다.


